{"version":3,"sources":["components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","arguments","localData","Id","Subject","StartTime","Date","EndTime","args","navigation","enable","startId","endId","text","data","colors","a","n","Math","floor","random","length","push","Text","Color","currentView","selectedDate","eventSettings","dataSource","this","dragStart","onDragStart","bind","field","title","name","allowMultiple","generateResourceData","textField","idField","colorField","option","services","Day","Week","Month","Agenda","DragAndDrop","Resize","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WA+DeA,E,YAzDX,aAAe,IAAD,8BACV,6CAASC,aACJC,UAAY,CAAC,CACdC,GAAI,EACJC,QAAS,gBACTC,UAAW,IAAIC,KAAK,KAAM,GAAI,EAAG,GAAI,IACrCC,QAAS,IAAID,KAAK,KAAM,GAAI,EAAG,GAAI,KAEvC,CACIH,GAAI,EACJC,QAAS,gBACTC,UAAW,IAAIC,KAAK,KAAM,GAAI,GAAI,GAAI,IACtCC,QAAS,IAAID,KAAK,KAAM,GAAI,GAAI,GAAI,MAZ9B,E,yEAgBFE,GACRA,EAAKC,WAAWC,QAAS,I,2CAGRC,EAASC,EAAOC,GAOjC,IANA,IAAIC,EAAO,GACPC,EAAS,CACT,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,WAE5BC,EAAIL,EAASK,GAAKJ,EAAOI,IAAK,CACnC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,EAAOM,QAC1CP,EAAKQ,KAAK,CACNnB,GAAIa,EACJO,KAAMV,EAAO,IAAMG,EACnBQ,MAAOT,EAAOE,KAGtB,OAAOH,I,+BAIP,OACI,kBAAC,IAAD,CAAmBW,YAAY,QAAQC,aAAc,IAAIpB,KAAQqB,cAAe,CAAEC,WAAYC,KAAK3B,WAAa4B,UAAYD,KAAKE,YAAYC,KAAKH,OAC9I,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAmBI,MAAM,aAAaC,MAAM,WAAWC,KAAK,YAAYC,eAAe,EAAMR,WAAYC,KAAKQ,qBAAqB,EAAE,IAAK,SAAUC,UAAU,OAAOC,QAAQ,KAAKC,WAAW,WAGjM,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAeC,OAAO,QACtB,kBAAC,IAAD,CAAeA,OAAO,SACtB,kBAAC,IAAD,CAAeA,OAAO,UACtB,kBAAC,IAAD,CAAeA,OAAO,YAE1B,kBAAC,IAAD,CAAQC,SAAU,CAACC,IAAKC,IAAMC,IAAOC,IAAQC,IAAaC,OAX9D,S,GAzCWC,IAAMC,WCQdC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7489af1.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Inject, ScheduleComponent, Day, Week, Month, Agenda, DragAndDrop, Resize, ViewsDirective, ViewDirective, ResourceDirective, ResourcesDirective} from \"@syncfusion/ej2-react-schedule\";\r\n\r\nimport '../App.css'\r\n\r\nclass Calendar extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.localData = [{\r\n            Id: 1,\r\n            Subject: 'Football game',\r\n            StartTime: new Date(2019, 10 ,9, 20, 10),\r\n            EndTime: new Date(2019, 10 ,9, 22, 10)\r\n        },\r\n        {\r\n            Id: 2,\r\n            Subject: 'Read the book',\r\n            StartTime: new Date(2019, 10, 10, 15, 10),\r\n            EndTime: new Date(2019, 10, 10, 17, 10)\r\n            },\r\n        ]\r\n    }\r\n    onDragStart(args) {\r\n        args.navigation.enable = true;\r\n    }\r\n\r\n    generateResourceData(startId, endId, text) {\r\n        let data = [];\r\n        let colors = [\r\n            '#ff8787', '#9775fa', '#748ffc', '#3bc9db', '#69db7c',\r\n            '#fdd835', '#748ffc', '#9775fa', '#df5286', '#7fa900',\r\n            '#fec200', '#5978ee', '#00bdae', '#ea80fc'\r\n        ];\r\n        for (let a = startId; a <= endId; a++) {\r\n            let n = Math.floor(Math.random() * colors.length);\r\n            data.push({\r\n                Id: a,\r\n                Text: text + ' ' + a,\r\n                Color: colors[n]\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ScheduleComponent currentView='Month' selectedDate={new Date()} eventSettings={{ dataSource: this.localData }} dragStart={(this.onDragStart.bind(this))}>\r\n                <ResourcesDirective>\r\n                    <ResourceDirective field='ResourceId' title='Resource' name='Resources' allowMultiple={true} dataSource={this.generateResourceData(1,300, 'color')} textField='Text' idField='Id' colorField='Color'>\r\n                    </ResourceDirective>\r\n                </ResourcesDirective>\r\n                <ViewsDirective>\r\n                    <ViewDirective option='Day' />\r\n                    <ViewDirective option='Week' />\r\n                    <ViewDirective option='Month' />\r\n                    <ViewDirective option='Agenda' />\r\n                </ViewsDirective>\r\n                <Inject services={[Day, Week, Month, Agenda, DragAndDrop, Resize]} />>\r\n            </ScheduleComponent>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calendar","import React from 'react';\nimport './App.css';\nimport Calendar from \"./components/Calendar\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}